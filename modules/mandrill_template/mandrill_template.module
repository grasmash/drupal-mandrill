<?php

/**
 * @file
 * Enables Drupal to send email using Mandrill's template system.
 */

/**
 * Implements hook_entity_insert().
 */
function mandrill_template_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {

  if ($entity->getEntityTypeId() !== 'node' || ($entity->getEntityTypeId() === 'node' && $entity->bundle() !== 'article')) {
    return;
  }

  $mailManager = \Drupal::service('plugin.manager.mail');

  $module = 'mandrill_template';
  $key = 'node_insert';
  $to = \Drupal::currentUser()->getEmail();
  $params['message'] = $entity->get('body')->value;
  $params['node_title'] = $entity->label();
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = true;

  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
  if ($result['result'] !== true) {
    $message = t('There was a problem sending your email notification to @email for creating node @id.', array('@email' => $to, '@id' => $entity->id()));
    drupal_set_message($message, 'error');
    \Drupal::logger('mandrill_template')->error($message);
    return;
  }

  $message = t('An email notification has been sent to @email for creating node @id.', array('@email' => $to, '@id' => $entity->id()));
  drupal_set_message($message);
  \Drupal::logger('mandrill_template')->notice($message);
}

/**
 * Loads a single Mandrill Template Map, or all if no ID is provided.
 *
 * @param string $id
 *   The ID of the Template Map to load.
 *
 * @return array
 *   Array of Template Maps.
 */
function mandrill_template_map_load_entities($id = NULL) {
  $query = \Drupal::entityQuery('mandrill_template_map');

  if (!empty($id)) {
    $query->condition('id', $id);
  }

  $map_ids = $query->execute();
  $template_maps = \Drupal\mandrill_template\Entity\MandrillTemplateMap::loadMultiple($map_ids);

  return (!empty($id)) ? reset($template_maps) : $template_maps;
}

/**
 * Tells you which template_map is configured for a mailsystem key, if any.
 *
 * Will search for a default-system mapping if none is availble for a given key.
 * 
 * @param string $mailsystem
 *   Mail key to search for a template mapping.
 *
 * @return entity
 *   Mandrill template map.
 */
function mandrill_template_map_load_by_mailsystem($module_key, $module) {
  // Append the default-system condition as a fallback.
  $params = array($module_key, $module, 'default-system');

  $map_ids = \Drupal::entityQuery('mandrill_template_map')
    ->condition('mailsystem_key', $params, 'IN')
    ->execute();

  $template_maps = \Drupal\mandrill_template\Entity\MandrillTemplateMap::loadMultiple($map_ids);

  $module_match = FALSE;
  if (!empty($template_maps)) {
    /* @var $map \Drupal\mandrill_template\Entity\MandrillTemplateMap */
    foreach ($template_maps as $template_map) {
      switch ($template_map->mailsystem_key) {
        case $module_key:
          return $template_map;

        case $module:
          $module_match = $template_map;
          break;
      }
    }

    return $module_match ? $module_match : reset($template_maps);
  }

  return NULL;
}

/**
 * Get all mailsystem keys pointed at mandrill and their template mappings.
 * 
 * @return array
 *   Returns an array with indexes matching each module which is assigned
 *   to use Mandrill for email sends, and values equal to the template_map_ids
 *   that are assigned to those modules. If no template maps are assigned, the
 *   value is set to NULL.
 */
function mandrill_template_map_usage() {
  $mailsystem_config = \Drupal::service('config.factory')->getEditable('mailsystem.settings');
  $defaults = $mailsystem_config->get('defaults');
  $modules = $mailsystem_config->get('modules');

  $system_assignments = array();

  if ($defaults['sender'] == 'mandrill_mail') {
    $system_assignments['default-system'] = NULL;
  }

  foreach (array_keys($modules) as $module_name) {
    foreach ($modules[$module_name] as $key => $options) {
      if ($options['sender'] == 'mandrill_mail') {
        $system_assignments[$module_name . '_' . $key] = NULL;
      }
    }
  }

  $maps = mandrill_template_map_load_entities();
  foreach ($maps as $map) {
    if (isset($map->mailsystem_key) && array_key_exists($map->mailsystem_key, $system_assignments)) {
      $system_assignments[$map->mailsystem_key] = $map->mandrill_template_map_entity_id;
    }
  }
  uksort($system_assignments, '_mandrill_template_map_mailsystem_sort');

  return $system_assignments;
}

/**
 * Implements hook_mandrill_mail_alter().
 *
 * Determine if an email is configured to use a Mandrill template and change the
 * mandrill_send_function parameter as needed.
 */
function mandrill_template_mandrill_mail_alter(&$mandrill_params, $message) {
  $template_map = mandrill_template_map_load_by_mailsystem($message['id'], $message['module']);
  if ($template_map) {
    $mandrill_params['function'] = 'mandrill_template_sender';
    $mandrill_params['args'] = array(
      'template_id' => $template_map->template_id,
      'template_content' => array(
        array(
          'name' => $template_map->main_section,
          'content' => $message['body'],
        ),
      ),
    );
    if (isset($message['mandrill_template_content'])) {
      $mandrill_params['args']['template_content'] = array_merge($message['mandrill_template_content'], $mandrill_params['args']['template_content']);
    }
  }
}

/**
 * Send a templated Mandrill message.
 *
 * This function checks for appropriate settings in the message, then uses the
 * template API call to send the message if the settings are valid.
 *
 * @param array $message
 *   Mandrill message to send.
 * @param string $template_id
 *   Name of the template to use.
 * @param array $template_content
 *   Associative array mapping template regions and content.
 *
 * @return array
 *   Message response.
 */
function mandrill_template_sender($message, $template_id, $template_content) {
  /* @var $mandrill_api \Drupal\mandrill\MandrillAPI */
  $mandrill_api = \Drupal::service('mandrill.api');
  $mandrill_api->sendTemplate($mandrill_api, $template_id, $template_content);
}

/**
 * Simple sorting algorithm to organize mailsystems arrays in a logical way.
 * 
 * @param string $a
 *   a mailsystem key name
 * @param string $b
 *   a mailsystem key name
 * 
 * @return int
 *   Negative if $a should come before $b, else positive.
 */
function _mandrill_template_map_mailsystem_sort($a, $b) {
  $first = "default-system";
  $last = "mandrill_test";
  if ($a == $first || $b == $last) {
    return -1;
  }
  if ($b == $first || $a == $last) {
    return 1;
  }
  // Otherwise sort alphabetically, case-agnostic
  return strcasecmp($a, $b);
}
